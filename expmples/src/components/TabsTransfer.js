amis.define('src/components/TabsTransfer.tsx', function(require, exports, module, define) {

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.TabsTransfer = void 0;
  const tslib_1 = require("node_modules/tslib/tslib");
  const react_1 = tslib_1.__importDefault(require("node_modules/react/index"));
  const helper_1 = require("src/utils/helper.ts");
  const Tabs_1 = tslib_1.__importStar(require("src/components/Tabs.tsx"));
  const SearchBox_1 = tslib_1.__importDefault(require("src/components/SearchBox.tsx"));
  const TableCheckboxes_1 = tslib_1.__importDefault(require("src/components/TableCheckboxes.tsx"));
  const TreeCheckboxes_1 = tslib_1.__importDefault(require("src/components/TreeCheckboxes.tsx"));
  const ChainedCheckboxes_1 = tslib_1.__importDefault(require("src/components/ChainedCheckboxes.tsx"));
  const ListCheckboxes_1 = tslib_1.__importDefault(require("src/components/ListCheckboxes.tsx"));
  const Transfer_1 = tslib_1.__importDefault(require("src/components/Transfer.tsx"));
  const theme_1 = require("src/theme.tsx");
  const AssociatedCheckboxes_1 = tslib_1.__importDefault(require("src/components/AssociatedCheckboxes.tsx"));
  const locale_1 = require("src/locale.tsx");
  let TabsTransfer = /** @class */ (() => {
      class TabsTransfer extends react_1.default.Component {
          renderSearchResult(searchResult) {
              const { searchResultMode, noResultsText, searchResultColumns, classnames: cx, value, disabled, onChange, option2value, cellRender } = this.props;
              const options = searchResult || [];
              const mode = searchResultMode;
              return mode === 'table' ? (react_1.default.createElement(TableCheckboxes_1.default, { placeholder: noResultsText, className: cx('Transfer-checkboxes'), columns: searchResultColumns, options: options, value: value, disabled: disabled, onChange: onChange, option2value: option2value, cellRender: cellRender })) : mode === 'tree' ? (react_1.default.createElement(TreeCheckboxes_1.default, { placeholder: noResultsText, className: cx('Transfer-checkboxes'), options: options, value: value, disabled: disabled, onChange: onChange, option2value: option2value })) : mode === 'chained' ? (react_1.default.createElement(ChainedCheckboxes_1.default, { placeholder: noResultsText, className: cx('Transfer-checkboxes'), options: options, value: value, disabled: disabled, onChange: onChange, option2value: option2value })) : (react_1.default.createElement(ListCheckboxes_1.default, { placeholder: noResultsText, className: cx('Transfer-checkboxes'), options: options, value: value, disabled: disabled, onChange: onChange, option2value: option2value }));
          }
          renderSelect({ onSearch, onSearchCancel, searchResult }) {
              const { options, placeholder, classnames: cx, value, disabled, onChange, onSearch: searchable, option2value, onDeferLoad, cellRender, translate: __ } = this.props;
              if (!Array.isArray(options) || !options.length) {
                  return (react_1.default.createElement("div", { className: cx('TabsTransfer-placeholder') }, __(placeholder || 'placeholder.noOption')));
              }
              return (react_1.default.createElement(Tabs_1.default, { mode: "card", className: cx('Transfer-tabs'), activeKey: searchResult !== null ? 0 : undefined, toolbar: searchable ? (react_1.default.createElement(react_1.default.Fragment, null,
                      react_1.default.createElement("span", { className: cx('TabsTransfer-tabsMid') }),
                      react_1.default.createElement(SearchBox_1.default, { onSearch: onSearch, onCancel: onSearchCancel }))) : null }, searchResult !== null
                  ? [
                      react_1.default.createElement(Tabs_1.Tab, { title: __('searchResult'), key: 0, eventKey: 0 }, this.renderSearchResult(searchResult))
                  ]
                  : options.map((option, index) => (react_1.default.createElement(Tabs_1.Tab, { eventKey: index, key: index, title: option.label || option.title }, option.selectMode === 'table' ? (react_1.default.createElement(TableCheckboxes_1.default, { className: cx('Transfer-checkboxes'), columns: option.columns, options: option.children || [], value: value, disabled: disabled, onChange: onChange, option2value: option2value, onDeferLoad: onDeferLoad, cellRender: cellRender })) : option.selectMode === 'tree' ? (react_1.default.createElement(TreeCheckboxes_1.default, { className: cx('Transfer-checkboxes'), options: option.children || [], value: value, disabled: disabled, onChange: onChange, option2value: option2value, onDeferLoad: onDeferLoad })) : option.selectMode === 'chained' ? (react_1.default.createElement(ChainedCheckboxes_1.default, { className: cx('Transfer-checkboxes'), options: option.children || [], value: value, disabled: disabled, onChange: onChange, option2value: option2value, onDeferLoad: onDeferLoad, defaultSelectedIndex: option.defaultSelectedIndex })) : option.selectMode === 'associated' ? (react_1.default.createElement(AssociatedCheckboxes_1.default, { className: cx('Transfer-checkboxes'), options: option.children || [], value: value, disabled: disabled, onChange: onChange, option2value: option2value, onDeferLoad: onDeferLoad, leftMode: option.leftMode, leftOptions: option.leftOptions, leftDefaultValue: option.leftDefaultValue })) : (react_1.default.createElement(ListCheckboxes_1.default, { className: cx('Transfer-checkboxes'), options: option.children || [], value: value, disabled: disabled, onChange: onChange, option2value: option2value, onDeferLoad: onDeferLoad })))))));
          }
          render() {
              const { className, classnames: cx } = this.props;
              return (react_1.default.createElement(Transfer_1.default, Object.assign({}, this.props, { statistics: false, className: cx('TabsTransfer', className), selectRender: this.renderSelect })));
          }
      }
      TabsTransfer.defaultProps = {
          selectTitle: 'Select.placeholder',
          resultTitle: 'Transfer.selectd',
          itemRender: (option) => react_1.default.createElement("span", null, option.label)
      };
      tslib_1.__decorate([
          helper_1.autobind,
          tslib_1.__metadata("design:type", Function),
          tslib_1.__metadata("design:paramtypes", [Object]),
          tslib_1.__metadata("design:returntype", void 0)
      ], TabsTransfer.prototype, "renderSelect", null);
      return TabsTransfer;
  })();
  exports.TabsTransfer = TabsTransfer;
  exports.default = theme_1.themeable(locale_1.localeable(TabsTransfer));
  //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFic1RyYW5zZmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9EOi9teV9wcm8vYmFpZHUtYW1pcy1tYXN0ZXIgKDEpL2FtaXMvc3JjL2NvbXBvbmVudHMvVGFic1RyYW5zZmVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsMERBQTBCO0FBQzFCLDRDQUF5QztBQUN6Qyx1REFBaUM7QUFDakMsb0VBQW9DO0FBQ3BDLGdGQUFnRDtBQUNoRCw4RUFBOEM7QUFDOUMsb0ZBQW9EO0FBQ3BELDhFQUE4QztBQUU5QyxrRUFBbUQ7QUFDbkQsb0NBQW1DO0FBQ25DLDBGQUEwRDtBQUMxRCxzQ0FBcUM7QUFtQnJDO0lBQUEsTUFBYSxZQUFhLFNBQVEsZUFBSyxDQUFDLFNBQTRCO1FBT2xFLGtCQUFrQixDQUFDLFlBQTRCO1lBQzdDLE1BQU0sRUFDSixnQkFBZ0IsRUFDaEIsYUFBYSxFQUNiLG1CQUFtQixFQUNuQixVQUFVLEVBQUUsRUFBRSxFQUNkLEtBQUssRUFDTCxRQUFRLEVBQ1IsUUFBUSxFQUNSLFlBQVksRUFDWixVQUFVLEVBQ1gsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ2YsTUFBTSxPQUFPLEdBQUcsWUFBWSxJQUFJLEVBQUUsQ0FBQztZQUNuQyxNQUFNLElBQUksR0FBRyxnQkFBZ0IsQ0FBQztZQUU5QixPQUFPLElBQUksS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQ3hCLDhCQUFDLHlCQUFlLElBQ2QsV0FBVyxFQUFFLGFBQWEsRUFDMUIsU0FBUyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUNwQyxPQUFPLEVBQUUsbUJBQW9CLEVBQzdCLE9BQU8sRUFBRSxPQUFPLEVBQ2hCLEtBQUssRUFBRSxLQUFLLEVBQ1osUUFBUSxFQUFFLFFBQVEsRUFDbEIsUUFBUSxFQUFFLFFBQVEsRUFDbEIsWUFBWSxFQUFFLFlBQVksRUFDMUIsVUFBVSxFQUFFLFVBQVUsR0FDdEIsQ0FDSCxDQUFDLENBQUMs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

});
